home-assistant:
  hostNetwork: true
  dnsPolicy: ClusterFirstWithHostNet
  ingress:
    enabled: true
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      hajimari.io/appName: Home-Assistant-New
      hajimari.io/icon: google-drive
      nginx.org/websocket-services: home-assistant-new
      external-dns.alpha.kubernetes.io/target: "homelab-tunnel.danger250.com"
      external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
    hosts:
      - host: &host home-assistant-new.danger250.com
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - secretName: home-assistant-new-tls-certificate
        hosts:
          - *host
  persistence:
    enabled: true
    size: 2Gi
  configuration:
    enabled: true
    forceInit: true
    trusted_proxies:
      - 10.0.0.0/8
      - 172.16.0.0/12
      - 192.168.0.0/16
      - 127.0.0.0/8
    kiosk_mode:
      non_admin_settings:
        hide_header: true
        ignore_entity_settings: true
    templateConfig: |-
      # Loads default set of integrations. Do not remove.
      default_config:

      {{- if .Values.ingress.enabled }}
      http:
        use_x_forwarded_for: true
        trusted_proxies:
          {{- range .Values.configuration.trusted_proxies }}
          - {{ . }}
          {{- end }}
      {{- end}}
      # Load frontend themes from the themes folder
      frontend:
        themes: !include_dir_merge_named themes
      automation: !include automations.yaml
      script: !include scripts.yaml
      scene: !include scenes.yaml
      sensor:
         - platform: swiss_public_transport_mod
           name: Weinbergli
           limit: 4
           stationboard:
             - Luzern, Weinbergli
    initScript: |-
      #!/bin/bash
      set -e

      # Check if the configuration file exists
      if [ ! -f /config/configuration.yaml ]; then
        echo "Configuration file not found, creating a new one"
        cp /config-templates/configuration.yaml /config/configuration.yaml
      fi

      # Check if the force init is enabled
      forceInit="{{ .Values.configuration.forceInit }}"
      if [ "$forceInit" = "true" ]; then
        echo "Force init is enabled, overwriting the configuration file"
        current_time=$(date +%Y%m%d_%H%M%S)
        echo "Backup the current configuration file to configuration.yaml.$current_time"
        cp /config/configuration.yaml /config/configuration.yaml.$current_time
        echo "The current configuration file will be merged with the default configuration file with this content:"
        cat /config-templates/configuration.yaml
        if [[ ! -s /config/configuration.yaml ]]; then
          # If /config/configuration.yaml is empty, use the content of /config-templates/configuration.yaml
          cat /config-templates/configuration.yaml > /config/configuration.yaml
        else
          # Perform the merge operation if /config/configuration.yaml is not empty
          yq eval-all --inplace 'select(fileIndex == 0) *d select(fileIndex == 1)' /config/configuration.yaml /config-templates/configuration.yaml
        fi
      fi

      # Check if the automations file exists
      if [ ! -f /config/automations.yaml ]; then
        echo "Automations file not found, creating a new one"
        touch /config/automations.yaml
        echo "[]" >> /config/automations.yaml
      fi

      # Check if the scripts file exists
      if [ ! -f /config/scripts.yaml ]; then
        echo "Scripts file not found, creating a new one"
        touch /config/scripts.yaml
      fi

      # Check if the scenes file exists
      if [ ! -f /config/scenes.yaml ]; then
        echo "Scenes file not found, creating a new one"
        touch /config/scenes.yaml
      fi
  addons:
    codeserver:
      enabled: true